<?php

use App\Mail\GiftVoucher;
use App\Mail\InvoiceEmail;
use App\Mail\OtpSendToEmail;
use App\Mail\VerifyEmail;
use App\Models\Api\Users;
use App\Models\Emailtemplates;
use App\Models\Modules;
use App\Models\Permissions;
use App\Models\RoleAccess;
use App\Models\Salons;
use Carbon\Carbon;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Route;
use Illuminate\Support\Str;
// use Mail;
// use Mail;
/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return Str::uuid();
}

if (!function_exists('homeRoute')) {
    /**
     * Return the route to the "home" page depending on authentication/authorization is_active.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

// Global helpers file with misc functions.
if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('includeRouteFiles')) {
    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory . $filename)) {
                array_push($directory_list, $directory . $filename . '/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory . '*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (!function_exists('getRtlCss')) {
    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path) . '/' . $filename . '.rtl.css';
    }
}

if (!function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (!function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';

        if (!empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (!function_exists('checkDatabaseConnection')) {
    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (\Exception$e) {
            return false;
        }
    }
}

if (!function_exists('encode')) {
    /**
     * @return bool
     */
    function encode($str)
    {
        return base64_encode($str);
    }
}

if (!function_exists('decode')) {
    /**
     * @return bool
     */
    function decode($str)
    {
        return base64_decode($str);
    }
}

if (!function_exists('currentDateTime')) {
    function currentDateTime()
    {
        $format = 'Y-m-d H:i:s';
        return date($format);
    }
}
if (!function_exists('currentDate')) {
    function currentDate()
    {
        $format = 'Y-m-d';
        return date($format);
    }
}
if (!function_exists('currentTime')) {
    function currentTime($format = '24')
    {
        $format = 'H:i:s';
        if ($format == 12) {
            $format = 'H:i A';
        }
        return date($format);
    }
}

if (!function_exists('checkaccess')) {
    function checkaccess($action = "", $controller = "")
    {
        if ($action == 'store') {
            $action = 'create';
        } elseif ($action == 'edit') {
            $action = 'update';
        } elseif ($action == 'accessupdate') {
            $action = 'access';
        }
        $adminuser = auth()->user();
        if ($action && $controller) {
            $modulesdata = Modules::where(['is_active' => '1', 'controller' => $controller, 'action' => $action])->first();
            if (empty($modulesdata)) {
                $modulesdata = Modules::where(['is_active' => '1', 'controller' => $controller])->first();
            }
            if ($modulesdata) {
                $permissionAction = Permissions::where(['module_id' => $modulesdata->id, 'controller' => $controller])->where('action', $action)->first();
                if ($permissionAction) {
                    $module_access = RoleAccess::where(['role_id' => $adminuser->role_id, 'permission_id' => $permissionAction->id, 'access' => '1'])->first();
                    if ($module_access) {
                        return true;
                    }
                } else {
                    $permissionName = Permissions::where(['module_id' => $modulesdata->id, 'controller' => $controller])->where('name', $action)->first();
                    if ($permissionName) {
                        $module_access = RoleAccess::where(['role_id' => $adminuser->role_id, 'permission_id' => $permissionName->id, 'access' => '1'])->first();
                        if ($module_access) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
}

if (!function_exists('getController')) {
    function getControllerName()
    {
        $action = app('request')->route()->getAction();

        $controller = class_basename($action['controller']);

        list($controller, $action) = explode('@', $controller);
        $current = strtolower(str_replace('Controller', '', $controller));
        return $current;
    }
}

if (!function_exists('getAction')) {
    function getActionName()
    {
        $action = app('request')->route()->getAction();

        $controller = class_basename($action['controller']);

        list($controller, $action) = explode('@', $controller);

        return $action;
    }
}

if (!function_exists('ImageFullUrl')) {
    function ImageFullUrl($image_name, $path)
    {
        return url('storage/' . $path . '/' . $image_name);
    }
}

if (!function_exists('UtcToLocal')) {
    function UtcToLocal($date, $salon_id)
    {
        if ($date && $salon_id) {
            $salons = Salons::select('timezone')->where('id', $salon_id)->first()->makeHidden(['isNewRecord'])->toArray();
            if ($salons && isset($salons['timezone']) && $salons['timezone']) {
                $dateformated = Carbon::parse($date)->timezone($salons['timezone'])->format('l jS F Y');
                return $dateformated;
            }
        }
        return "";
    }
}

if (!function_exists('sendMail')) {
    function sendMail($email, $template, $field = array())
    {
        if ($email && $template) {
            $action_url = URL::to(config('params.site_url'));
            $name = "Beauty@info";

            $logo = "<a href='" . $action_url . "'><img src='" . config('params.logo_img') . "' alt='Logo' style='width: 94px;'></a>";
            $site_url = config('params.site_url');
            $site_name = config('params.site_name');
            $site_address = config('params.site_address');
            $fromEmail = config('params.support_email');

            $toEmail = $email;
            $copyright_text = str_replace('{year}', date('Y'), config('params.copyright_text'));

            if (isset($template['code']) && $template['code']) {
                $code = $template['code'];
                $EmailTemplates = Emailtemplates::where(['code' => $code])->first();
                if (empty($EmailTemplates)) {
                    return false;
                }
                $subject = $EmailTemplates->subject;
                $message = $EmailTemplates->html;
                $message = str_replace('{{logo}}', $logo, $message);
                $message = str_replace('{{site_url}}', $site_url, $message);
                $message = str_replace('{{site_name}}', $site_name, $message);
                $message = str_replace('{{site_address}}', $site_address, $message);
                $message = str_replace('{{copyright_text}}', $copyright_text, $message);
                $message = str_replace('{{name}}', $name, $message);
                $message = str_replace('{{action_url}}', $action_url, $message);
                if ($field) {
                    foreach ($field as $key => $value) {
                        $message = str_replace("{{" . $key . "}}", $value, $message);
                    }
                }
                $data = array(
                    'body' => $message,
                );
                try {
                    $sendemail = Mail::send(['html' => 'emails.mail'], $data, function ($message) use ($toEmail, $fromEmail, $subject) {
                        // echo $toEmail . ' ' . $fromEmail . ' ' . $subject;
                        $message->to($toEmail)->subject($subject);
                        $message->from($fromEmail);
                    });
                } catch (\Exception$e) {
                    if (count(Mail::failures()) > 0) {
                        return false;
                    }
                }
            } else {
                try {
                    $data = $field;
                    $template = isset($template['template']) && $template['template'] ? $template['template'] : "";
                    $templateClass = "";
                    if ($template === "OtpSendToEmail") {
                        Mail::to($toEmail)->send(new OtpSendToEmail($data));
                    }
                    if ($template === "VerifyEmail") {
                        Mail::to($toEmail)->send(new VerifyEmail($data));
                    }

                    if ($template === "GiftVoucher") {
                        $user = Users::find(auth()->user()->id);
                        $salon = $user->salon;
                        $data['business_logo'] = $salon->logo_url;
                        $data['business_name'] = $salon->business_name ? $salon->business_name : config('app.name');
                        $data['business_email'] = $user->email;
                        $data['business_phone_number'] = $salon->business_phone_number;
                        $data['business_address'] = $salon->business_address;
                        Mail::to($toEmail)->send(new GiftVoucher($data));
                    }
                    if ($template === "Invoice") {
                        Mail::to($toEmail)->send(new InvoiceEmail($data));
                    }
                    // } catch (\Swift_TransportException$e) {
                    //     if ($e->getMessage()) {
                    //         dd($e->getMessage());
                    //     }
                    // }
                } catch (\Exception$e) {
                    echo '<pre>';
                    print_r(Mail::failures());
                    echo '<pre>';
                    dd();

                    if (count(Mail::failures()) > 0) {
                        return false;
                    }
                }

            }

            return true;
        }
        return "";
    }
}

if (!function_exists('MinutesToHours')) {
    function MinutesToHours($minutes)
    {
        if ($minutes) {
            $hours = intdiv($minutes, 60) . ':' . ($minutes % 60);
            return $hours;
        }
        return "";
    }
}

if (!function_exists('HoursToMinutes')) {
    function HoursToMinutes($hours)
    {
        if ($hours) {
            $from = date('Y-m-d 00:00:00');
            $to = date('Y-m-d ' . $hours . ':00');
            $diff = strtotime($to) - strtotime($from);
            $minutes = $diff / 60;
            return (int) $minutes;
        }
        return "";
    }
}